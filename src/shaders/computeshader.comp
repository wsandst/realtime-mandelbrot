#version 430 core

#ifdef GL_ES
precision highp float;
#endif

//Output texture
layout(binding = 0, rgba32f) uniform writeonly image2D framebuffer;
uniform sampler1D colormap;

// Viewport
uniform float viewX = -2.25;
uniform float viewWidth = 3;
uniform float viewY = -1.5;
uniform float viewHeight = 3;

uniform int ITERATIONS = 50;

//Coloring
uniform float ITER_EXP_DECAY = 0.5;
uniform int COLOR_ITER_LOOP = 10;

#define M_PI 3.1415926535897932384626433832795
#define M_LOG2 0.69314

vec3 getColorCircle(float i)
{
    vec3 color;
    color.z = (sin(i / 10 + 2 * M_PI / 3) + 1) / 2;
    color.x = (sin(i / 10 + 4 * M_PI / 3) + 1) / 2;
    color.y = (sin(i / 10) + 1) / 2;
    return color;
}

vec3 mandelbrot(vec2 pos)
{
  float u = 0.0;
  float v= 0.0;
  float u2 = u * u;
  float v2 = v*v;
  float x = viewX + pos.x * viewWidth;
  float y = viewY + pos.y * viewHeight;
  // Iterate the point through the mandelbrot equation
  int i = 0;
  for (i = 0; i < ITERATIONS && ((u2 + v2) < 16.0); i++) { //Larger cutoff (16) allows for smoother coloring
        v = 2 * u * v + y;
        u = u2 - v2 + x;
        u2 = u * u;
        v2 = v * v;
  };

  if (i >= ITERATIONS) { //Interior
    return vec3(0.0, 0.0, 0.0); // Black interior
  }
  else { //Exterior
    float smoothI = i + 1 - log(log(sqrt(u2 + v2))) / M_LOG2; // Calculate smooth iteration value
    return texture(colormap, fract(pow(smoothI, ITER_EXP_DECAY) / COLOR_ITER_LOOP)).rgb; // Map the exponentially decayed iteration to the color map
  };
}

//Return a color based on the current float pos or integer pixel pos
vec4 draw(vec2 pos, ivec2 pixel)
{
  return vec4(mandelbrot(pos), 1.0);//vec4(pos.x, 0.0, pos.y, 1.0);
}

layout (local_size_x = 16, local_size_y = 8) in;
void main(void) {
  ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
  ivec2 size = imageSize(framebuffer);
  if (pix.x >= size.x || pix.y >= size.y) {
    return;
  }
  vec2 pos = vec2(pix) / vec2(size.x - 1, size.y - 1);
  vec4 color = vec4(pos.x, 0.0, pos.y, 1.0);
  imageStore(framebuffer, pix, draw(pos, pix));
}
